[1,["5cKCCmlN1M07/TAmLKeEHJ@f9941","f2fY56EKVNaIpjTR02/Sl/@f9941","41JSefTR5C0bR+af3iWWD5","58dxL0nAtI6KxT45mfIpa8@f9941","d2vqToez1M1aO9cx+9lSMv@f9941","635+M6sGlIrp6P53ftiqS9","cf0vFEtqRP1YEKBCucjkO8@f9941","85381U7VVM/Jt8mffWkWPp@f9941","15ju8zJRJHTb9HyGhlWt/4@f9941","f3YzN6zjJNlZzqnC7cHjw8","58dxL0nAtI6KxT45mfIpa8@6c48a","5cKCCmlN1M07/TAmLKeEHJ@6c48a"],["node","_spriteFrame","_textureSource","root","runProcess","data","_customMaterial","_font","_effectAsset"],[["cc.Node",["_name","_layer","_components","_prefab","_parent","_children","_lpos"],1,9,4,1,2,5],["cc.Sprite",["_sizeMode","_type","node","__prefab","_spriteFrame","_customMaterial"],1,1,4,6,6],["cc.UITransform",["node","__prefab","_contentSize","_anchorPoint"],3,1,4,5,5],"cc.SpriteFrame",["cc.Widget",["_alignFlags","_bottom","_top","_originalWidth","_originalHeight","node","__prefab"],-2,1,4],["cc.Mask",["_type","_segments","node","__prefab","_spriteFrame"],1,1,4,6],["cc.Prefab",["_name"],2],["cc.Node",["_name","_layer","_parent","_children","_components","_prefab","_lpos"],1,1,2,12,4,5],["cc.CompPrefabInfo",["fileId"],2],["cf226B46kpPDr1tzayatvJt",["node","__prefab","runProcess"],3,1,4,1],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.Label",["_string","_actualFontSize","_fontSize","_lineHeight","_isSystemFontUsed","_isBold","node","__prefab","_font"],-3,1,4,6],["cc.LabelOutline",["node","__prefab","_color"],3,1,4,5],["bb6b8AxDzhIMqF4IXfURrbd",["node","__prefab"],3,1,4],["cc.Material",["_props","_states","_defines"],0],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[8,0,2],[10,0,1,2,2],[2,0,1,2,1],[0,0,1,4,2,3,6,3],[0,0,1,4,5,2,3,6,3],[1,2,3,4,1],[2,0,1,2,3,1],[6,0,2],[0,0,5,2,3,2],[0,0,1,4,2,3,3],[7,0,1,2,3,4,5,6,3],[2,0,1,1],[4,0,2,1,3,4,5,6,6],[4,0,1,5,6,3],[9,0,1,2,1],[1,1,0,2,3,4,3],[1,0,2,3,4,2],[1,1,0,2,3,5,4,3],[5,2,3,1],[5,0,1,2,3,4,3],[11,0,1,2,3,4,5,6,7,8,7],[12,0,1,2,1],[13,0,1,1],[14,0,1,2,4],[15,0,1,2,4]],[[[[7,"loaddingPage"],[8,"loaddingPage",[-6,-7,-8,-9],[[2,-2,[0,"2czTN7Ct9E2ob0y5uHcEHr"],[5,750,1344]],[12,45,-5,-5,750,1344,-3,[0,"be3ohVeQpBMaQmwDZ5Igjn"]],[14,-5,[0,"4f73Z68rFO4ZGlW8TjKw2T"],-4]],[1,"55W1YhKh1NFY18l8im66TE",-1,0]],[10,"process",33554432,1,[-13,-14],[[[2,-10,[0,"c7svN6WqFAyaxO+IoiXx7O"],[5,411,64]],[15,1,0,-11,[0,"4evMnme3NIJ5jJZUYKWOwp"],6],-12],4,4,1],[1,"fcDiwra+dKTqmqWnOF6yFB",1,0],[1,0,-402.032,0]],[4,"companyLogo",33554432,1,[-17,-18],[[11,-15,[0,"efozL61gVOf45XzgXUGKw7"]],[13,4,28.976999999999975,-16,[0,"b3SRNQ1CFL1op9qJuuCjSo"]]],[1,"75CRNCWBNE8IrxGQQNxLQy",1,0],[1,0,-593.023,0]],[4,"mask0",33554432,2,[-21],[[6,-19,[0,"02Lmibt+9HJIsBkzlqjyqf"],[5,0,32],[0,0,0.5]],[18,-20,[0,"64rrJ2j+FK0LMmrjBjftPd"]]],[1,"8a6zmIvMdFdLudjr1S/nK4",1,0],[1,-192.199,3.855,0]],[4,"mask1",33554432,4,[-24],[[6,-22,[0,"91Y9FI4VBGDIJFtMC5PrkY"],[5,384,32],[0,0,0.5]],[19,3,600,-23,[0,"95Bok928lNeaMR2zsiAiNl"],4]],[1,"7dSUG5Q5FANrSoOcG4q9jB",1,0],[1,-0.026999999999986812,0,0]],[3,"processText",33554432,2,[[2,-25,[0,"c68UOAlNhN171Umca6yVvF"],[5,34.94,34.239999999999995]],[20,"0%",24,24,24,false,true,-26,[0,"2frm37uaJHQr0AEEaYyM82"],5],[21,-27,[0,"93U4P0b51BmbZms39zPiA5"],[4,4287775244]]],[1,"11qi+7M9FMPaq854LQFU/g",1,0],[1,0,4.849,0]],[9,"bg",33554432,1,[[2,-28,[0,"1aCSK8JS1HwKwua3RmijQm"],[5,750,1666]],[16,0,-29,[0,"9fc0NWLtNKEbqYNRZANUDv"],0]],[1,"151mZWsrVI37VrJohAbSow",1,0]],[3,"tittle",33554432,1,[[2,-30,[0,"2aX7atSq1LjIAxHZtwuuLy"],[5,588,236]],[5,-31,[0,"1dfsEddG9PGrrAk/FhPFBX"],1]],[1,"8aATZw9zRC756VXqy8e15K",1,0],[1,0,385.946,0]],[3,"bg0",33554432,5,[[2,-32,[0,"406ZX7S05Eu7hqMKFYZjHv"],[5,1000,32]],[17,2,0,-33,[0,"056hNkbvFHuKCzsv9lnbfe"],2,3]],[1,"9cHshHCPpPSaApvJRAJ+Uk",1,0],[1,0.026999999999986812,0,0]],[3,"尖牙-001",33554432,3,[[2,-34,[0,"87O8qajrJDNKaUC3CuRkGK"],[5,185,70]],[5,-35,[0,"ccJe3tXGBKPq0k8gdQ3eEG"],7]],[1,"e9ZTpRsTJIv7AxY5p0K5LH",1,0],[1,-125.841,0,0]],[3,"尖牙",33554432,3,[[2,-36,[0,"0eislZpXlHnpzYJaB6yM6D"],[5,204,73]],[5,-37,[0,"43UtSaQgRPRo4R8SW9WP+v"],8]],[1,"91rLK/2alHEZb8FDNEyEYl",1,0],[1,118.867,0,0]],[22,2,[0,"a2kYYqk0lDgK3j0rKGR/0J"]]],0,[0,3,1,0,0,1,0,0,1,0,4,12,0,0,1,0,-1,7,0,-2,8,0,-3,2,0,-4,3,0,0,2,0,0,2,0,-3,12,0,-1,4,0,-2,6,0,0,3,0,0,3,0,-1,10,0,-2,11,0,0,4,0,0,4,0,-1,5,0,0,5,0,0,5,0,-1,9,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,0,8,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,5,1,37],[0,0,0,0,0,0,0,0,0],[1,1,6,1,1,7,1,1,1],[0,1,2,3,4,5,6,7,8]],[[[23,[{"direction":4,"speed":2}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}]]],0,0,[0],[8],[9]],[[{"name":"3-1","rect":{"x":0,"y":0,"width":44,"height":32},"offset":{"x":0,"y":0},"originalSize":{"width":44,"height":32},"rotated":false,"capInsets":[0,0,0,0],"texture":"587712f4-9c0b-48e8-ac53-e3999f2296bc@6c48a","packable":true}],[3],0,[0],[2],[10]],[[{"name":"loadingPage (1)","rect":{"x":0,"y":0,"width":750,"height":1666},"offset":{"x":0,"y":0},"originalSize":{"width":750,"height":1666},"rotated":false,"capInsets":[0,0,0,0],"texture":"5c2820a6-94dd-4cd3-bfd3-0262ca7841c9@6c48a","packable":true}],[3],0,[0],[2],[11]],[[[24,"../loading/effect/uvRun2DLoadding",[{"hash":3561373546,"name":"../loading/effect/uvRun2DLoadding|sprite-vs:vert|sprite-fs:frag","glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_LOCAL\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(location = 0) out vec4 color;\nlayout(location = 1) out vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n    return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n    return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(set = 1, binding = 1) uniform OldPhoto {\n  float direction;\n  float speed;\n};\nlayout(location = 0) in vec4 color;\n#if USE_TEXTURE\n  layout(location = 1) in vec2 uv0;\n  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n     vec2 uvDis=vec2(0.0,0.0);\n     float dis= cc_time.x*speed;\n      if(direction==1.0){\n        uvDis=vec2(0.0, dis);\n      }else if(direction==2.0){\n        uvDis=vec2(dis,0.0);\n      }else if(direction==3.0){\n        uvDis=vec2(0.0,-dis);\n      }else if(direction==4.0){\n        uvDis=vec2(-dis,0.0);\n      }\n      vec2 myUV=uv0+uvDis;\n    if(direction==1.0 || direction==3.0){\n        myUV.y= myUV.y-1.0*floor( myUV.y/1.0);\n    }else   if(direction==2.0 || direction==4.0){\n        myUV.x= myUV.x-1.0*floor( myUV.x/1.0);\n    }\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture,  myUV);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_LOCAL\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n    return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n    return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(std140) uniform OldPhoto {\n  float direction;\n  float speed;\n};\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n     vec2 uvDis=vec2(0.0,0.0);\n     float dis= cc_time.x*speed;\n      if(direction==1.0){\n        uvDis=vec2(0.0, dis);\n      }else if(direction==2.0){\n        uvDis=vec2(dis,0.0);\n      }else if(direction==3.0){\n        uvDis=vec2(0.0,-dis);\n      }else if(direction==4.0){\n        uvDis=vec2(-dis,0.0);\n      }\n      vec2 myUV=uv0+uvDis;\n    if(direction==1.0 || direction==3.0){\n        myUV.y= myUV.y-1.0*floor( myUV.y/1.0);\n    }else   if(direction==2.0 || direction==4.0){\n        myUV.x= myUV.x-1.0*floor( myUV.x/1.0);\n    }\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture,  myUV);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matProj;\nuniform highp mat4 cc_matViewProj;\n#if USE_LOCAL\nuniform highp mat4 cc_matWorld;\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_time;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n    return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n    return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform float direction;\nuniform float speed;\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n     vec2 uvDis=vec2(0.0,0.0);\n     float dis= cc_time.x*speed;\n      if(direction==1.0){\n        uvDis=vec2(0.0, dis);\n      }else if(direction==2.0){\n        uvDis=vec2(dis,0.0);\n      }else if(direction==3.0){\n        uvDis=vec2(0.0,-dis);\n      }else if(direction==4.0){\n        uvDis=vec2(-dis,0.0);\n      }\n      vec2 myUV=uv0+uvDis;\n    if(direction==1.0 || direction==3.0){\n        myUV.y= myUV.y-1.0*floor( myUV.y/1.0);\n    }else   if(direction==2.0 || direction==4.0){\n        myUV.x= myUV.x-1.0*floor( myUV.x/1.0);\n    }\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture,  myUV);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplers":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}]}},"defines":[{"name":"USE_LOCAL","type":"boolean","defines":[]},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean","defines":[]},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"IS_GRAY","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"OldPhoto","stageFlags":16,"binding":1,"members":[{"name":"direction","type":13,"count":1},{"name":"speed","type":13,"count":1}],"defines":[]}],"samplers":[],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":1,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":2,"defines":[]}],"varyings":[{"name":"color","type":16,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"uv0","type":14,"count":1,"stageFlags":1,"location":1,"defines":[]}]}],[{"passes":[{"program":"../loading/effect/uvRun2DLoadding|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"direction":{"type":13,"value":[1]},"speed":{"type":13,"value":[1]}}}]}]]],0,0,[],[],[]]]]
